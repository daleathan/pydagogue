#!/usr/bin/env python
# vi: set fileencoding=utf-8 ft=python sts=4 ts=4 sw=4 et:

''' An attempt at a real implementation of the ``ahole`` version control system

I wrote this when I was trying to explain the idea by using links on the
filesystem as a proxy for the idea of using a hash addressable file system.  At
least, it gives you the idea of how simple it would be to write something like
git - unless it had to be very fast...
'''

import os
from datetime import date
import hashlib

class AHoleError(Exception):
    pass


def ahole_init():
    ''' Initialize the ahole repository '''
    os.mkdir('.ahole')
    os.mkdir('.ahole/staging_area')
    os.mkdir('.ahole/refs')
    os.mkdir('.ahole/refs/heads')
    os.mkdir('.ahole/refs/tags')
    file('.ahole/HEAD', 'wt').write('ref: refs/heads/master')


def head_id_fname():
    ''' Return commit id string for HEAD, and file it was read from

    For example, if we are in detached head mode, this will return something
    like '5afb74', '.ahole/HEAD'.  If we are on a branch, it will return
    something like '5afb74', '.ahole/refs/heads/master'
    '''
    head_file = '.ahole/HEAD'
    commit_str = file(head_file, 'rt').read().strip()
    if commit_str.startswith('ref:'):
        ref_file = '.ahole/' + commit_str.replace('ref: ', '')
        try:
            commit_str = file(ref_file).read().strip()
        except IOError: # ref file does not yet exist
            commit_str = ''
    else:
        ref_file = head_file
    return commit_str, ref_file


def same_contents(fname1, fname2):
    ''' Return True if `fname1` has same contents as `fname2`
    '''
    contents1 = file(fname1).read()
    contents2 = file(fname1).read()
    return contents1 == contents2


def copy_contents(fname1, fname2):
    ''' Copy contents of `fname` to `fname2`
    '''
    contents1 = file(fname1).read()
    file(fname2, 'w').write(contents1)


def link_dir_contents(dir1, dir2):
    ''' Make hard links in `dir2` for directory contents in `dir1`
    '''
    for fname in os.listdir(dir1):
        os.link(dir1 + fname, dir2 + fname)


def read_dir_contents(path):
    ''' Concatenate contents of all files in `path` to a string
    '''
    contents = ''
    for fname in os.listdir(path):
        full_fname = path + fname
        contents += file(full_fname).read()
    return contents


def ahole_stage(fname):
    ''' Add a file to the staging area '''
    head_id, ref_file = head_id_fname()
    staging_dir = '.ahole/staging_area/'
    # If there's no previous commit, just copy and return
    if head_id == '': # no previous commmit
        copy_contents(fname, staging_dir + fname)
        return
    # Next check if fname is same as archived - stop if so
    head_dir = '.hole/' + head_id + '/files/'
    if same_contents(fname, head_dir + fname):
        print 'No change from previous commit'
    # Link all the files for the current commit if we haven't done this already
    if os.listdir(stagig_dir) == []:
        link_dir_contents(head_dir, staging_dir)
    copy_contents(fname, staging_dir + fname)


def ahole_rm(fname):
    ''' Remove a file from the staging area

    Remove the file from pending commit
    '''
    head_id, ref_file = head_id_fname()
    staging_dir = '.ahole/staging_area/'
    if head_id == '': # no previous commmit
        raise AHoleError('No matching file')
    head_dir = '.ahole/' + head_id + '/files/'
    if not os.path.isfile(head_dir + fname):
        raise AHoleError('No matching file')
    # Link all the files for the current commit if we haven't done this already
    if os.listdir(staging_dir) == []:
        link_dir_contents(head_dir, staging_dir)
    os.remove(staging_dir + fname)


def make_commit(committer, message, parents):
    ''' Utility function to make commit '''
    staging_dir = '.ahole/staging_area/'
    if os.listdir(staging_dir) == []:
        raise AHoleError('Nothing to commit')
    infos = ['committer = %s' % committer,
             'date = %s' % date.today(),
             'message = %s' % message]
    for parent in parents:
        infos.append('parent = %s' % parent)
    info_str = '\n'.join(infos) + '\n'
    commit_contents = info_str + read_dir_contents(staging_dir)
    new_id = hashlib.sha1(commit_contents).hexdigest()
    new_id_dir = '.ahole/' + new_id + '/'
    os.mkdir(new_id_dir)
    os.rename(staging_dir, new_id_dir + 'files/')
    os.mkdir(staging_dir)
    file(new_id_dir + 'info.txt', 'wt').write(info_str)
    return new_id


def ahole_commit(committer, message):
    ''' Main routine for making non-merge commits
    '''
    head_id, ref_file = head_id_fname()
    if ref_file == '.ahole/HEAD':
        print 'Warning - detached HEAD'
    parents = []
    if head_id != '': # We have a parent
        parents.append(head_id)
    new_id = make_commit(committer, message, parents)
    file(ref_file, 'wt').write(new_id)


def refspec_id_txt(refspec):
    ''' Return commit id and reference text for `refspec`

    Examples
    --------
    refspec_id_txt('HEAD") -> '5afb7f', ''
    refspec_id_txt('master') -> '5afb7f', 'ref: refs/heads/master'
    '''
    if refspec == 'HEAD':
        head_id, ref_file = head_id_fname()
        return head_id, ''
    # Search in refs/heads, refs/tags 
    branch_files = os.listdir('.ahole/refs/heads')
    tag_files = os.listdir('.ahole/refs/tags')
    if refspec in branch_files:
        ref_file = '.ahole/refs/heads/' + refspec
        ref_ref = 'ref: refs/heads/' + refspec
    elif refspec in tag_files:
        ref_file = '.ahole/refs/tags/' + refspec
        ref_ref = ''
    else:
        raise AHoleError('Is "%s" a refspec?' % refspec)
    head_id = file(ref_file).read().strip()
    return head_id, ref_ref


def ahole_log(refspec='HEAD'):
    ''' Print out log from given commit (HEAD is default)
    '''
    head_id, ref_txt = refspec_id_txt(refspec)
    # Just do linear log for now
    while head_id != '':
        info_fname = '.ahole/' + head_id + '/info.txt'
        info_str = file(info_fname, 'rt').read()
        print 'Commit %s\n%s\n' % (head_id, info_str)
        info_lines = info_str.split('\n')
        for line in info_lines:
            if line.startswith('parent = '):
                head_id = line.replace('parent = ','').strip()
                break
        else: # found no parent
            head_id = ''


def ahole_tag(tagname, refspec='HEAD'):
    head_id, ref_txt = refspec_id_txt(refspec)
    ref_file = '.ahole/refs/tags/' + tagname
    file(ref_file, 'wt').write(head_id)


def ahole_branch(branchname, refspec='HEAD'):
    head_id, ref_txt = refspec_id_txt(refspec)
    ref_file = '.ahole/refs/heads/' + branchname
    file(ref_file, 'wt').write(head_id)


def ahole_checkout(refspec):
    # Parse refspec to get id, ref full reference
    head_id, ref_txt = refspec_id_txt(refspec)
    # Get all the files into the working directory
    commit_dir = '.ahole/' + head_id + '/files/'
    for fname in os.listdir(commit_dir):
        copy_contents(commit_dir + fname,
                      fname)
    # Set head
    if ref_txt == '':
        ref_txt = head_id
    file('.ahole/HEAD', 'wt').write(ref_txt)


if __name__ == '__main__':
    ahole_init()
    ahole_stage('make_foundations.sh')
    ahole_stage('real_ahole')
    ahole_commit('Matthew', 'A message')
    ahole_rm('make_foundations.sh')
    ahole_branch('first_branch')
    ahole_tag('first_commit', 'master')
    ahole_tag('commit_1', 'master')
    ahole_commit('Matthew', 'Removed foundations')
    ahole_checkout('first_commit')
    ahole_checkout('master')
    ahole_checkout('first_branch')
    ahole_checkout('master')
    ahole_log()
    ahole_log('first_commit')
